// initialization
$(function() {
  var tasks_ = new Object();
  var finishedTasks_ = new Object();
  var pomodoro_ = new Object();
  var break_ = new Object();
  var timer_ = null;

  var syncWithAsana = function(evt) {
    if (evt) evt.preventDefault();

    $('#modal-sync').modal({ backdrop: 'static', keyboard: false });
  
    $.getJSON('/sync/asana/workspaces', function(data) {
      // update workspace list
      $('#asana-workspaces option').remove();
      var sel = $("#asana-workspaces");
      $.each(data, function(idx, ws) {
        var opt = $(document.createElement('option'));
        opt.attr('value', ws.id);
        opt.text(ws.name);
        sel.append(opt);
      });
      sel.val(ws);
    });

    var ws = $('#asana-workspaces').val();
    if (!ws) return;

    $.getJSON('/sync/asana/tasks/' + ws, function(data) {
      // update task list
      tasks_ = new Object();
      $.each(data, function(idx, task) {
        tasks_[task.id] = {
          'id': task.id,
          'name': task.name,
          'due_on': task.due_on,
        };
      });
      updateTaskTable(tasks_);
      
      $('#modal-sync').modal('hide');
    });
  }

  var updateTaskTable = function(tasks) {
    $('#tasks tbody tr').remove();
    var taskTable = $('#tasks tbody');
    var isEmpty = true;
    $.each(tasks, function(idx, task) {
      isEmpty = false;
      var tr = $(document.createElement('tr'));
      tr.attr('id', 'task-' + task.id);
      tr.attr('data-task-id', task.id);
      
      var td1 = $(document.createElement('td'));
      td1.text(task.name);
      tr.append(td1);

      var td2 = $(document.createElement('td'));
      td2.text(task.due_on || "");
      tr.append(td2);

      var td3 = $(
          '<td><div class="btn-toolbar no-margin">'
        + '<div class="btn-group">'
          + '<a class="btn btn-danger start-pomodoro" href="#">Pomodoro</a></div>'
        + '<div class="btn-group">'
          + '<a class="btn dropdown-toggle" data-toggle="dropdown" href="#">Finish '
          + '<span class="caret"></span></a>'
          + '<ul class="dropdown-menu">'
            + '<li><a href="#" class="complete-task">Complete Task</a></li>'
            + '<li><a href="#" class="continue-tomorrow">Continue Tomorrow</a></li>'
          + '</ul>'
        + '</div></div></td>');
      tr.append(td3);

      taskTable.append(tr);
    });
    if (isEmpty) {
      var p = $(document.createElement('p'));
      p.addClass("no-task");
      p.text("No tasks left!");

      var td1 = $(document.createElement('td'));
      td1.attr("colspan", "3");
      td1.append(p);

      var tr = $(document.createElement('tr'));
      tr.append(td1);
      taskTable.append(tr);

      return;
    }

    $('#tasks tbody tr a.start-pomodoro').click(startPomodoro);
    $('#tasks tbody tr a.complete-task').click(completeTask);
    $('#tasks tbody tr a.continue-tomorrow').click(continueTomorrow);
  }

  var updateFinishedTaskTable = function(tasks) {
    $('#finished-tasks tbody tr').remove();
    var taskTable = $('#finished-tasks tbody');

    var isEmpty = true;
    $.each(tasks, function(idx, task) {
      isEmpty = false;
      var tr = $(document.createElement('tr'));
      tr.attr('id', 'finished-task-' + task.id);
      tr.attr('data-task-id', task.id);
      
      var td1 = $(document.createElement('td'));
      td1.text(task.name);
      tr.append(td1);

      var td2 = $(document.createElement('td'));
      if (task.status == "Complete")
        td2.text("Complete");
      else if (task.status == "Continue")
        td2.text("Continue Tomorrow");
      tr.append(td2);

      taskTable.append(tr);
    });
    if (isEmpty) {
      var td1 = $(document.createElement('td'));
      td1.attr("colspan", "2");
      td1.addClass("no-task");
      td1.text("No tasks finished...");

      var tr = $(document.createElement('tr'));
      tr.append(td1);
      taskTable.append(tr);

      return;
    }
  }

  var startSession = function(durationInSec, type) {
    if (window.webkitNotifications &&
      window.webkitNotifications.checkPermission() != 0) { // 0 is PERMISSION_ALLOWED
      window.webkitNotifications.requestPermission();
    }

    $('#finish-' + type).removeClass('btn-success').addClass('btn-danger')
    $('#finish-' + type).text('Abort');
    $('#modal-' + type).modal({ backdrop: 'static', keyboard: false });

    // Chrome wouldn't play sound without reloading.
    document.getElementById("audio-finish").load();

    timer_ = new CountdownTimer(durationInSec);
    timer_.done(function() {
      $('#finish-' + type).removeClass('btn-danger').addClass('btn-success')
      $('#finish-' + type).text('Close');

      if (window.webkitNotifications &&
          window.webkitNotifications.checkPermission() == 0) { // 0 is PERMISSION_ALLOWED
        notification = createNotificationInstance(type);
        notification.show();
      }

      // sound
      var audio = document.getElementById("audio-finish");
      audio.volume = 0.1;
      audio.pause();
      audio.play();
    });
    timer_.tick(function(restInMillis) {
      var minutes = Math.max(0, Math.floor(restInMillis / 60 / 1000));
      var seconds = Math.max(0, Math.floor((restInMillis % (60 * 1000)) / 1000));
      $('#' + type + '-timer').text(minutes + ":" + (seconds < 10 ? "0" + seconds : seconds));
    });
    timer_.start();
  }

  var finishSession = function(type) {
    if (timer_) {
      timer_.stop();
    }
    $('#modal-' + type).modal('hide');
  }

  var getTaskId = function(evt) {
    var trs = $(evt.srcElement).parents('tr');
    if (trs.length > 0) {
      return trs.first().attr('data-task-id');
    }

    return $('#modal-pomodoro').attr('data-task-id');
  }

  var startPomodoro = function(evt) {
    evt.preventDefault();
    var taskId = getTaskId(evt);
    var taskName = tasks_[taskId].name;

    pomodoro_['taskId'] = taskId;
    pomodoro_['taskName'] = taskName;

    var d = new Date();
    pomodoro_['startOn'] = dateString(d);
    pomodoro_['startAt'] = d.toISOString();

    $('#modal-pomodoro h3').text("Current Task: " + taskName);
    $('#modal-pomodoro').attr('data-task-id', taskId);
    startSession(25 * 60, 'pomodoro');
  }

  var finishPomodoro = function(evt) {
    evt.preventDefault();

    if (!timer_.isRunning()) {
      pomodoro_['endAt'] = new Date().toISOString();
      $.post('/pomodoro', pomodoro_);
    }

    $('#modal-pomodoro').removeAttr('data-task-id');
    finishSession('pomodoro');
  }

  var finishTask = function(taskId, status) {
    // move task from tasks_ to finishedTasks_
    var t = tasks_[taskId];
    t.status = status;
    delete tasks_[taskId];
    updateTaskTable(tasks_);

    var task = new Object();
    var d = new Date();
    task['finishOn'] = dateString(d);
    task['finishAt'] = d.toISOString();
    task['ident'] = taskId;
    task['name'] = t.name;
    task['status'] = status;
    $.post('/task', task, function(data) {
      finishedTasks_[taskId] = t;
      updateFinishedTaskTable(finishedTasks_);
    });
  }

  var completeTask = function(evt) {
    evt.preventDefault();
    finishTask(getTaskId(evt), "Complete");
  }

  var continueTomorrow = function(evt) {
    evt.preventDefault();
    finishTask(getTaskId(evt), "Continue");
  }

  var startBreak = function(durationInSec, evt) {
    evt.preventDefault();
    startSession(durationInSec, 'break');

    var d = new Date();
    break_['startOn'] = dateString(d);
    break_['startAt'] = d.toISOString();
  }

  var stopBreak = function(evt) {
    evt.preventDefault();

    if (!timer_.isRunning()) {
      break_['endAt'] = new Date().toISOString();
      $.post('/break', break_);
    }

    finishSession('break');
  }

  var dateString = function(date) {
    var month = date.getMonth() + 1;
    var day = date.getDate();
    return date.getFullYear() + "-"
      + (month < 10 ? ("0" + month) : month) + "-"
      + (day < 10 ? ("0" + day) : day);
  }

  var createNotificationInstance = function(type) {
    if (type == 'pomodoro') {
      return window.webkitNotifications.createNotification(
        "/static/img/tomato-icon.32.png",
        "Pomodoro finished",
        "Well done!");
    } else {
      return window.webkitNotifications.createNotification(
        "/static/img/tomato-icon.32.png",
        "Break is over",
        "Let's get back to work!");
    }
  }

  var CountdownTimer = function(durationInSec) {
    this.endEpochTime = Date.now() + durationInSec * 1000;
    this.enable = false;
    this.callbackOnTick = null;
    this.callbackWhenDone = null;
  }

  CountdownTimer.prototype = {
    start: function() {
      this.enable = true;
      this._tick()
    },

    stop: function() {
      this.enable = false;
    },

    isRunning: function() {
      return this.endEpochTime > Date.now();
    },

    _tick: function() {
      if (!this.enable) return;
      var rest = this.endEpochTime - Date.now();
      if (this.callbackOnTick) {
        this.callbackOnTick.call(this, rest);
      }
      if (rest < 0) {
        if (this.callbackWhenDone) {
          this.callbackWhenDone.call(this, rest);
        }
        return;
      }

      var thisObj = this;
      setTimeout(function() { thisObj._tick.call(thisObj); }, 1000);
    },

    done: function(callback) {
      this.callbackWhenDone = callback;
    },

    tick: function(callback) {
      this.callbackOnTick = callback;
    },
  };

  // bind events to event handlers
  $('#sync-tasks').click(syncWithAsana);
  $('#asana-workspaces').change(syncWithAsana);
  $('#finish-pomodoro').click(finishPomodoro);
  $('#break-short').click(function(evt) { startBreak(5 * 60, evt); });
  $('#break-long').click(function(evt) { startBreak(20 * 60, evt); });
  $('#finish-break').click(stopBreak);

  // start sync-ing to display today's tasks
  syncWithAsana();
/*
  tasks_['0000'] = {
    'id': '0000',
    'name': "Ship 'Napolitan' beta1!",
    'due_on': null,
  };
  $('#task-0000 a.btn-danger').click(startPomodoro);
  $('#task-0000 li:first-child a').click(completeTask);
  $('#task-0000 li:last-child a').click(continueTomorrow);
*/
});
