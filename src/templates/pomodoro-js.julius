// initialization
$(function() {
  var syncWithAsana = function() {
    $('#modal-sync').modal({ backdrop: 'static', keyboard: false });
  
    var ws = $('#asana-workspaces').val();
    $.getJSON('/sync/asana', { 'workspace': ws }, function(data) {
      // update workspace list
      $('#asana-workspaces option').remove();
      var sel = $("#asana-workspaces");
      $.each(data[0], function(idx, ws) {
        var opt = $(document.createElement('option'));
        opt.attr('value', ws.id);
        opt.text(ws.name);
        sel.append(opt);
      });
      sel.val(ws);

      // update task list
      $('#tasks tbody tr').remove();
      var tasks = $('#tasks tbody');
      $.each(data[1], function(idx, task) {
        var tr = $(document.createElement('tr'));
        tr.attr('id', 'task-' + task.id);
        
        var td1 = $(document.createElement('td'));
        td1.text(task.name);
        tr.append(td1);

        var td2 = $(document.createElement('td'));
        td2.text(task.due_on || "");
        tr.append(td2);

        var td3 = $(
            '<td><div class="btn-toolbar no-margin">'
          + '<div class="btn-group">'
            + '<a class="btn btn-danger start-pomodoro" href="#">Pomodoro</a></div>'
          + '<div class="btn-group">'
            + '<a class="btn dropdown-toggle" data-toggle="dropdown" href="#">Finish '
            + '<span class="caret"></span></a>'
            + '<ul class="dropdown-menu">'
              + '<li><a href="#" class="complete-task">Complete Task</a></li>'
              + '<li><a href="#" class="continue-tomorrow">Continue Tomorrow</a></li>'
            + '</ul>'
          + '</div></div></td>');
        tr.append(td3);

        tasks.append(tr);
      });
      $('#tasks tbody tr a.start-pomodoro').click(startPomodoro);
      $('#tasks tbody tr a.complete-task').click(completeTask);
      $('#tasks tbody tr a.continue-tomorrow').click(continueTomorrow);

      $('#modal-sync').modal('hide');
    });
  }

  var timer = null;

  var startSession = function(durationInSec, type) {
    $('#finish-' + type).removeClass('btn-success').addClass('btn-danger')
    $('#finish-' + type).text('Abort');
    $('#modal-' + type).modal({ backdrop: 'static', keyboard: false });

    // Chrome wouldn't play sound without reloading.
    document.getElementById("audio-finish").load();

    timer = new CountdownTimer(durationInSec);
    timer.done(function() {
      $('#finish-' + type).removeClass('btn-danger').addClass('btn-success')
      $('#finish-' + type).text('Close');
      var audio = document.getElementById("audio-finish");
      audio.pause();
      audio.currentTime = 0;
//      audio.play();
    });
    timer.tick(function(restInMillis) {
      var minutes = Math.floor(restInMillis / 60 / 1000);
      var seconds = Math.floor((restInMillis % (60 * 1000)) / 1000);
      $('#' + type + '-timer').text(minutes + ":" + (seconds < 10 ? "0" + seconds : seconds));
    });
    timer.start();
  }

  var finishSession = function(type) {
    if (timer) {
      timer.stop();
    }
    $('#modal-' + type).modal('hide');
  }

  var startPomodoro = function() {
    startSession(3, 'pomodoro');
  }

  var completeTask = function() {
  }

  var continueTomorrow = function() {
  }

  var finishPomodoro = function() {
    finishSession('pomodoro');
  }

  var startBreak = function(durationInSec) {
    startSession(durationInSec, 'break');
  }

  var stopBreak = function() {
    finishSession('break');
  }

  var CountdownTimer = function(durationInSec) {
    this.endEpochTime = Date.now() + durationInSec * 1000;
    this.enable = false;
    this.callbackOnTick = null;
    this.callbackWhenDone = null;
  }

  CountdownTimer.prototype = {
    start: function() {
      this.enable = true;
      this._tick()
    },

    stop: function() {
      this.enable = false;
    },

    _tick: function() {
      if (!this.enable) return;
      var rest = this.endEpochTime - Date.now();
      if (this.callbackOnTick) {
        this.callbackOnTick.call(this, rest);
      }
      if (rest < 0) {
        if (this.callbackWhenDone) {
          this.callbackWhenDone.call(this, rest);
        }
        return;
      }

      var thisObj = this;
      setTimeout(function() { thisObj._tick.call(thisObj); }, 1000);
    },

    done: function(callback) {
      this.callbackWhenDone = callback;
    },

    tick: function(callback) {
      this.callbackOnTick = callback;
    },
  };

  // bind events to event handlers
  $('#sync-tasks').click(syncWithAsana);
  $('#asana-workspaces').change(syncWithAsana);
  $('#finish-pomodoro').click(finishPomodoro);
  $('#break-short').click(function() { startBreak(5 * 60); });
  $('#break-long').click(function() { startBreak(20 * 60); });
  $('#finish-break').click(stopBreak);

  // start sync-ing to display today's tasks
//  syncWithAsana();
  $('#test').click(startPomodoro);
});

